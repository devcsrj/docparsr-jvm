plugins {
    id "com.adarshr.test-logger" version "2.0.0"
    id "com.github.hierynomus.license" version "0.15.0"
    id "idea"
    id "java-library"
    id "io.gitlab.arturbosch.detekt" version "1.6.0"
    id 'org.jetbrains.dokka' version '0.10.1'
    id "org.jetbrains.kotlin.jvm" version "1.3.70"
    id 'org.unbroken-dome.test-sets' version '2.2.1'
}

ext {
    jacksonVersion = "2.10.2"
    okhttpVersion = "4.4.0"
    slf4jVersion = "1.7.30"
    spekVersion = "2.0.9"
    tikaVersion = "1.23"
    testcontainersVersion = "1.12.5"

    gradleScriptDir = "${rootProject.projectDir}/gradle"
}

apply from: "${gradleScriptDir}/publication.gradle"

group "com.github.devcsrj"
version "1.0.0-SNAPSHOT"

description = "Transforms PDF, Documents and Images into Enriched Structured Data"

repositories {
    mavenCentral()
    jcenter()
}

testSets {
    functionalTest
}

configurations {
    functionalTest.extendsFrom testImplementation
}

dependencies {
    api("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    api("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.3")
    api("com.fasterxml.jackson.core:jackson-core:$jacksonVersion")
    api("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
    api("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion")
    api("com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion")
    api("com.squareup.okhttp3:okhttp:$okhttpVersion")
    api("org.apache.tika:tika-core:$tikaVersion")
    api("org.slf4j:slf4j-api:$slf4jVersion")

    testRuntime("org.slf4j:slf4j-simple:$slf4jVersion")

    testImplementation('org.junit.jupiter:junit-jupiter:5.6.0')
    testImplementation("org.spekframework.spek2:spek-dsl-jvm:$spekVersion")
    testImplementation("org.assertj:assertj-core:3.15.0")
    testImplementation("org.skyscreamer:jsonassert:1.5.0")
    testImplementation("com.squareup.okhttp3:mockwebserver:$okhttpVersion")
    testImplementation("org.mockito:mockito-core:3.3.0")
    testImplementation("com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0")

    functionalTestImplementation("org.testcontainers:testcontainers:$testcontainersVersion")
    functionalTestImplementation("com.squareup.okhttp3:logging-interceptor:$okhttpVersion")

    testRuntimeOnly("org.spekframework.spek2:spek-runner-junit5:$spekVersion")
    testRuntimeOnly("org.jetbrains.kotlin:kotlin-reflect")
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs = ["-XXLanguage:+InlineClasses"]
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs = ["-XXLanguage:+InlineClasses"]
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

license {
    exclude "**/*.csv"
    exclude "**/*.json"
    exclude "**/*.md"
    exclude "**/*.pdf"
    exclude "**/*.txt"
    header = file("licenseheaders.txt")
}

java {
    withJavadocJar()
    withSourcesJar()
}